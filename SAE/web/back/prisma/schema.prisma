generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ingredient {
  idIngredient Int     @id
  pictureUrl   String? @db.Text
}

model ingredientRecipe {
  idIngredient   Int     @id
  idRecipe       Int?
  mesure         String? @db.VarChar(50)
  quantity       Float?  @db.Float
  nameIngredient String? @db.VarChar(50)
  recipe         recipe? @relation(fields: [idRecipe], references: [idRecipe], onDelete: NoAction, onUpdate: NoAction, map: "ingredientRecipe_ibfk_1")

  @@index([idRecipe], map: "idRecipe")
}

model likeRecettePerDay {
  idRecipe Int
  dateLike DateTime @db.Date
  count    Int?
  recipe   recipe   @relation(fields: [idRecipe], references: [idRecipe], onDelete: NoAction, onUpdate: NoAction, map: "likeRecettePerDay_ibfk_1")

  @@id([idRecipe, dateLike])
}

model playlist {
  idPlaylist     Int              @id
  mailUser       String?          @db.VarChar(250)
  name           String?          @db.VarChar(250)
  user           user?            @relation(fields: [mailUser], references: [mail], onDelete: NoAction, onUpdate: NoAction, map: "playlist_ibfk_1")
  recipePlaylist recipePlaylist[]

  @@index([mailUser], map: "mailUser")
}

model recipe {
  idRecipe          Int                 @id
  name              String?             @db.VarChar(100)
  difficulty        Int?
  price             Float?              @db.Float
  ingredientRecipe  ingredientRecipe[]
  likeRecettePerDay likeRecettePerDay[]
  recipePlaylist    recipePlaylist[]
  tagRecette        tagRecette[]
}

model recipePlaylist {
  idPlaylist Int
  idRecipe   Int
  playlist   playlist @relation(fields: [idPlaylist], references: [idPlaylist], onDelete: NoAction, onUpdate: NoAction, map: "recipePlaylist_ibfk_1")
  recipe     recipe   @relation(fields: [idRecipe], references: [idRecipe], onDelete: NoAction, onUpdate: NoAction, map: "recipePlaylist_ibfk_2")

  @@id([idPlaylist, idRecipe])
  @@index([idRecipe], map: "idRecipe")
}

model user {
  mail       String     @id @db.VarChar(250)
  firstname  String?    @db.VarChar(50)
  lastname   String?    @db.VarChar(75)
  password   String?    @db.VarChar(300)
  price      Float?     @db.Float
  difficulty Int?
  gender     Int?
  playlist   playlist[]
  tagUser    tagUser[]
}

model tag {
  idTag      Int          @id
  name       String?      @db.VarChar(50)
  tagRecette tagRecette[]
}

model tagRecette {
  idTag    Int
  idRecipe Int
  tag      tag    @relation(fields: [idTag], references: [idTag], onDelete: NoAction, onUpdate: NoAction, map: "tagRecette_ibfk_1")
  recipe   recipe @relation(fields: [idRecipe], references: [idRecipe], onDelete: NoAction, onUpdate: NoAction, map: "tagRecette_ibfk_2")

  @@id([idTag, idRecipe])
  @@index([idRecipe], map: "idRecipe")
}

model tagUser {
  mailUser String @db.VarChar(250)
  idTag    Int
  user     user   @relation(fields: [mailUser], references: [mail], onDelete: NoAction, onUpdate: NoAction, map: "tagUser_ibfk_1")

  @@id([mailUser, idTag])
}
